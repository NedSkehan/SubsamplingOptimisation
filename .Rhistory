95+103
55+247
95+55
103+247
350+155
?table
?matrix
((59.4-95)^2)/59.4
((90.6-55)^2)/90.6
((138.6-103)^2)/138.6
((211.4-247)^2)/211.4
21.34+13.99+9.14+6
(95-59.4)/sqrt(59.4)
(55-90.6)/sqrt(90.6)
(103-138.6)/sqrt(138.6)
(247-211.4)/sqrt(211.4)
(1.96^2*40^2)/5^2
a<- c(3,6,5,6,6,3,4,4,5,3)
b<- c(156,171,225,198,214,166,170,136,179,136)
r3 <- rbind(a,b)
plot(r3)
plot(r3[,1],r3[,2])
r3
plot(r3[1,],r3[2,])
lm(r3~1,r3)
lm(r3~1,as.data.frame(r3))
lm <- lm(r3~1,as.data.frame(r3))
lm
summary(lm)
lm <- lm(a ~ b)
lm
abline(lm(a~b))
abline(lm(a ~ b))
plot(r3[1,],r3[2,])
abline(lm(a ~ b))
abline(lm(b ~ a))
lm <- lm(b~a)
lm
r5 <- c(445,425,195,345,400,415,447,431,413,387,197,520,433,456,696,488,175,470,288,467,475,485,505,314)
r5 <- as.data.frame(r5)
mean(r5)
r5 <- c(445,425,195,345,400,415,447,431,413,387,197,520,433,456,696,488,175,470,288,467,475,485,505,314)
mean(r5)
sd(r5)
((0-0.72)^2*0.65)+((1-0.72)^2*0.13)+((2-0.72)^2*0.12)+((3-0.72)^2*.05)+((4-0.72)^2*.05)
sqrt(1.3416)
1.09*106-90.638
1.09*105-90.638
0.753*25+87.268
0.2340+0.1596+0.0746+0.0229+0.0042+0.0003
5/25
(0.2-0.45)/sqrt((0.45*0.55)/25)
(0.2-0.45)/sqrt((0.2*0.8)/25)
(0.2-0.45)/sqrt((0.45*0.55)/10)
(2.576^2*0.5*0.5)/0.04^2
a <- c(4,5,3,2,4,2,0,5,0,1,1)
a
mean(a)
sd(a)
(111*86)/186
sqrt((6.574^2/4682)+(7.192^2/163))
(59.85-55.87)/0.5714552
setwd("~/Software/")
getwd()
setwd("C:/Users/ndskh/OneDrive/Documents/Ned PhD Docs/Software/R Packages_Manual downloads")
install.packages("C://Users/ndskh/OneDrive/Documents/Ned PhD Docs/Software/R Packages_Manual downloads/resemble_1.3.5.tar.gz",repos = NULL,type = "source")
install.packages("C:\resemble_1.3.5.tar.gz",repos = NULL,type = "source")
install.packages("C:\\resemble_1.3.5.tar.gz",repos = NULL,type = "source")
remove.packages("resemble", lib="~/R/win-library/3.6")
install.packages("C:\\Users\ndskh\OneDrive\Documents\Neds PhD Docs\Software\R Packages_Manual downloads\resemble_1.3.5.tar.gz",repos = NULL,type = "source"")
install.packages("C:\\Users/ndskh/OneDrive/Documents/Neds PhD Docs/Software/R Packages_Manual downloads/resemble_1.3.5.tar.gz",repos = NULL,type = "source"")
install.packages("C://Users/ndskh/OneDrive/Documents/Neds PhD Docs/Software/R Packages_Manual downloads/resemble_1.3.5.tar.gz",repos = NULL,type = "source"")
install.packages("C:\Users\ndskh\OneDrive\Documents\Neds PhD Docs\Software\R Packages_Manual downloads\resemble_1.3.5.tar.gz",repos = NULL,type = "source"")
install.packages("C:\\Users\ndskh\OneDrive\Documents\Neds PhD Docs\Software\R Packages_Manual downloads\resemble_1.3.5.tar.gz",repos = NULL,type = "source"")
install.packages("~/R/win-library/3.6/resemble_1.3.5.tar.gz",repos=NULL,type="source")
shiny::runApp('~/Personal/Cow Tracking/Cow_Tracking')
runApp('~/Personal/Cow Tracking/Cow_Tracking')
?reactive
?fileinput
?fileInput
runApp('~/Personal/Cow Tracking/Cow_Tracking')
?textOutput
runApp('~/Personal/Cow Tracking/Cow_Tracking')
runApp('~/Personal/Cow Tracking/Cow_Tracking')
?reactive
runApp('~/Personal/Cow Tracking/Cow_Tracking')
library(shiny)
runApp(list(
ui = shinyUI(pageWithSidebar(
headerPanel('Uploading Files'),
sidebarPanel(
fileInput('file1', 'Upload Kill Data csv',
accept = c('text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain','.csv','.tsv'),
multiple = T),
fileInput('file2', 'Upload TSI csv',
accept = c('text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain','.csv','.tsv'),
multiple = T),
fileInput('file3', 'Upload Points csv',
accept = c('text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain','.csv','.tsv')),
uiOutput('buttonsUI'), br(),
uiOutput('downloadUI')
),
mainPanel(
tableOutput('readytable')
)
)),
server = shinyServer(function(input, output) {
# variables to control the sequence of processes
controlVar <- reactiveValues(uploadReady = FALSE, fileReady = FALSE, tableReady = FALSE)
# to keep the data upload
dat <- NULL
# handle the file reading
observeEvent(input$file1, {
if (is.null(input$file1))
return()
dat1 <<- rbindlist(lapply(input$file1$datapath, fread),
use.names = T, fill = T)
if(!is.data.frame(dat1))
return()
})
observeEvent(input$file2, {
if(is.null(input$file2))
return()
inFile2 <- input$file2
dat2 <<- rbindlist(lapply(input$file2$datapath, fread),
use.names = T, fill = T)
})
observeEvent(input$file3, {
controlVar$uploadReady <- FALSE
if(is.null(input$file3))
return()
inFile3 <- input$file3
dat3 <<- read.csv(inFile3$datapath)
controlVar$uploadReady <- TRUE
})
# show buttons only when file is uploaded
output$buttonsUI <- renderUI({
if (controlVar$uploadReady)
div(
dateInput('date','Select when the file was uploaded',
value = NULL,
format = 'yyyy-mm-dd'),
actionButton('go','go')
)
})
# add columns to dat and run some script on it
observeEvent(input$go, {
controlVar$tableReady <- FALSE
kd <- dat1
md <- dat2
ranking <- dat3
# remove duplicates
md <- md[!duplicated(md),]
# remove blanks (no parental data)
md <- md[!md$EID=="",]
md <- md[!md$Dam=="",]
md <- md[!md$Sire=="",]
# append mothering data to the kill data
data.all <- merge(kd,md,by = "EID")
# pull out points for each attribute
marble.rank <- na.omit(ranking[,c("Marble","Marble.Points")])
entry.index.rank <- na.omit(ranking[,c("Entry.Index.min","Entry.Index.max","Entry.Index.Points")])
carcase.rank <- na.omit(ranking[,c("Carcase.Weight.min","Carcase.Weight.max","Carcase.Weight.Points")])
adg.rank <- na.omit(ranking[,c("ADG.min","ADG.max","ADG.Points")])
p8.rank <- na.omit(ranking[,c("P8.Fat.min","P8.Fat.max","P8.Fat.Points")])
#marb.fun <- function(f) {
#  marble.rank[which(f == marble.rank$Marble),2]
#}
#entr.fun <- function(f) {
#  entry.index.rank[which(f > entry.index.rank$Entry.Index.min & f <= entry.index.rank$Entry.Index.max),3]
#}
#carc.fun <- function(f) {
#  carcase.rank[which(f > carcase.rank$Carcase.Weight.min & f <= carcase.rank$Carcase.Weight.max),3]
#}
#adg.fun <- function(f) {
#  adg.rank[which(f > adg.rank$ADG.min & f <= adg.rank$ADG.max),3]
#}
#p8.fun <- function(f) {
#  p8.rank[which(f > p8.rank$P8.Fat.min & f <= p8.rank$P8.Fat.max),3]
#}
data.all$Marble.Points <- sapply(data.all$Marble,function(f) {
marble.rank[which(f == marble.rank$Marble),2]
})
#data$Entry.Index.Points <- sapply(data$Entry.Index,entr.fun)
data.all$Carcase.Points <- sapply(data.all$`Carcase Weight`,function(f) {
carcase.rank[which(f > carcase.rank$Carcase.Weight.min & f <= carcase.rank$Carcase.Weight.max),3]
})
data.all$ADG.Points <- sapply(data.all$`Feedlot WG`,function(f) {
adg.rank[which(f > adg.rank$ADG.min & f <= adg.rank$ADG.max),3]
})
data.all$P8.Points <- sapply(data.all$`P8 Fat`,function(f) {
p8.rank[which(f > p8.rank$P8.Fat.min & f <= p8.rank$P8.Fat.max),3]
})
# extract cow ranking
data.all$`Total Score` <- NA
for (i in 1:length(data.all$Dam)) {
data.all$`Total Score`[i] <-sum(data.all[i,c("Marble.Points","Carcase.Points","ADG.Points","P8.Points")])
}
cow.rank <<- data.all[,c("Dam","Carcase Weight","Marble","Feedlot WG","P8 Fat","Total Score")]
cow.rank <<- cow.rank[order(-`Total Score`),]
# simulate running a cool script on dat
Sys.sleep(2)
controlVar$tableReady <- TRUE
})
# render table after uploading file or running the script
output$readytable <- renderTable({
input$go
if (controlVar$fileReady || controlVar$tableReady)
cow.rank
})
# show a download button only if data is ready
output$downloadUI <- renderUI({
if (controlVar$tableReady)
downloadButton('downloadData', 'Download')
})
# handle the download button
output$downloadData <- downloadHandler(
filename = function() { 'newData.csv' },
content = function(file) {
write.csv(cow.rank, file)
}
)
})
))
?rbindlist
??rbindlist
library(data.table)
runApp(list(
ui = shinyUI(pageWithSidebar(
headerPanel('Uploading Files'),
sidebarPanel(
fileInput('file1', 'Upload Kill Data csv',
accept = c('text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain','.csv','.tsv'),
multiple = T),
fileInput('file2', 'Upload TSI csv',
accept = c('text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain','.csv','.tsv'),
multiple = T),
fileInput('file3', 'Upload Points csv',
accept = c('text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain','.csv','.tsv')),
uiOutput('buttonsUI'), br(),
uiOutput('downloadUI')
),
mainPanel(
tableOutput('readytable')
)
)),
server = shinyServer(function(input, output) {
# variables to control the sequence of processes
controlVar <- reactiveValues(uploadReady = FALSE, fileReady = FALSE, tableReady = FALSE)
# to keep the data upload
dat <- NULL
# handle the file reading
observeEvent(input$file1, {
if (is.null(input$file1))
return()
dat1 <<- rbindlist(lapply(input$file1$datapath, fread),
use.names = T, fill = T)
if(!is.data.frame(dat1))
return()
})
observeEvent(input$file2, {
if(is.null(input$file2))
return()
inFile2 <- input$file2
dat2 <<- rbindlist(lapply(input$file2$datapath, fread),
use.names = T, fill = T)
})
observeEvent(input$file3, {
controlVar$uploadReady <- FALSE
if(is.null(input$file3))
return()
inFile3 <- input$file3
dat3 <<- read.csv(inFile3$datapath)
controlVar$uploadReady <- TRUE
})
# show buttons only when file is uploaded
output$buttonsUI <- renderUI({
if (controlVar$uploadReady)
div(
dateInput('date','Select when the file was uploaded',
value = NULL,
format = 'yyyy-mm-dd'),
actionButton('go','go')
)
})
# add columns to dat and run some script on it
observeEvent(input$go, {
controlVar$tableReady <- FALSE
kd <- dat1
md <- dat2
ranking <- dat3
# remove duplicates
md <- md[!duplicated(md),]
# remove blanks (no parental data)
md <- md[!md$EID=="",]
md <- md[!md$Dam=="",]
md <- md[!md$Sire=="",]
# append mothering data to the kill data
data.all <- merge(kd,md,by = "EID")
# pull out points for each attribute
marble.rank <- na.omit(ranking[,c("Marble","Marble.Points")])
entry.index.rank <- na.omit(ranking[,c("Entry.Index.min","Entry.Index.max","Entry.Index.Points")])
carcase.rank <- na.omit(ranking[,c("Carcase.Weight.min","Carcase.Weight.max","Carcase.Weight.Points")])
adg.rank <- na.omit(ranking[,c("ADG.min","ADG.max","ADG.Points")])
p8.rank <- na.omit(ranking[,c("P8.Fat.min","P8.Fat.max","P8.Fat.Points")])
#marb.fun <- function(f) {
#  marble.rank[which(f == marble.rank$Marble),2]
#}
#entr.fun <- function(f) {
#  entry.index.rank[which(f > entry.index.rank$Entry.Index.min & f <= entry.index.rank$Entry.Index.max),3]
#}
#carc.fun <- function(f) {
#  carcase.rank[which(f > carcase.rank$Carcase.Weight.min & f <= carcase.rank$Carcase.Weight.max),3]
#}
#adg.fun <- function(f) {
#  adg.rank[which(f > adg.rank$ADG.min & f <= adg.rank$ADG.max),3]
#}
#p8.fun <- function(f) {
#  p8.rank[which(f > p8.rank$P8.Fat.min & f <= p8.rank$P8.Fat.max),3]
#}
data.all$Marble.Points <- sapply(data.all$Marble,function(f) {
marble.rank[which(f == marble.rank$Marble),2]
})
#data$Entry.Index.Points <- sapply(data$Entry.Index,entr.fun)
data.all$Carcase.Points <- sapply(data.all$`Carcase Weight`,function(f) {
carcase.rank[which(f > carcase.rank$Carcase.Weight.min & f <= carcase.rank$Carcase.Weight.max),3]
})
data.all$ADG.Points <- sapply(data.all$`Feedlot WG`,function(f) {
adg.rank[which(f > adg.rank$ADG.min & f <= adg.rank$ADG.max),3]
})
data.all$P8.Points <- sapply(data.all$`P8 Fat`,function(f) {
p8.rank[which(f > p8.rank$P8.Fat.min & f <= p8.rank$P8.Fat.max),3]
})
# extract cow ranking
data.all$`Total Score` <- NA
for (i in 1:length(data.all$Dam)) {
data.all$`Total Score`[i] <-sum(data.all[i,c("Marble.Points","Carcase.Points","ADG.Points","P8.Points")])
}
cow.rank <<- data.all[,c("Dam","Carcase Weight","Marble","Feedlot WG","P8 Fat","Total Score")]
cow.rank <<- cow.rank[order(-`Total Score`),]
# simulate running a cool script on dat
Sys.sleep(2)
controlVar$tableReady <- TRUE
})
# render table after uploading file or running the script
output$readytable <- renderTable({
input$go
if (controlVar$fileReady || controlVar$tableReady)
cow.rank
})
# show a download button only if data is ready
output$downloadUI <- renderUI({
if (controlVar$tableReady)
downloadButton('downloadData', 'Download')
})
# handle the download button
output$downloadData <- downloadHandler(
filename = function() { 'newData.csv' },
content = function(file) {
write.csv(cow.rank, file)
}
)
})
))
library(devtools)
install_github("NedSkehan/SubsamplingOptimisation")
install_github("NedSkehan/SubsamplingOptimisation")
install_github("NedSkehan/SubsamplingOptimisation/SubsamplingOptimisation")
install_github("NedSkehan/SubsamplingOptimisation")
install_github('SubsamplingOptimisation','NedSkehan')
?install_github
setwd("C:\Users\ndskh\git_environment")
setwd("C:/Users/ndskh/git_environment")
setwd("./SubsamplingOptimisation")
document()
